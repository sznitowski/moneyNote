{"version":3,"sources":["http-common.js","services/OperationDataService.js","context/OperationContext.js","components/HeaderBalanceItem.jsx","components/HeaderIncomeItem.jsx","components/HeaderExpenseItem.jsx","components/Header.jsx","components/HistoryIncome.jsx","components/HistoryExpense.jsx","components/History.jsx","components/InputConcept.jsx","components/InputAmount.jsx","components/InputDate.jsx","components/InputType.jsx","components/InputButton.jsx","components/Inputs.jsx","App.js","service-worker.js","index.js"],"names":["axios","create","baseURL","headers","httpMethods","getAll","http","get","id","data","post","update","put","remove","delete","OperationContext","createContext","OperationContextProvider","props","useState","operations","setOperations","incomesArray","filter","item","type","expensesArray","concept","setConcept","amount","setAmount","date","setDate","setType","Provider","value","RetrieveOperations","OperationDataService","then","response","console","log","catch","e","HandleSubmit","preventDefault","newIncome","newExpense","window","alert","HandleDelete","array","itemID","filteredArray","HandleUpdate","updatedItem","prompt","indexToRemove","indexOf","newArray","slice","children","HeaderBalanceItem","title","className","HeaderIncomeItem","HeaderExpenseItem","Header","useContext","totalIncome","reduce","sum","current","parseInt","totalExpense","currentBalance","useEffect","HistoryIncome","map","operation","onClick","HistoryExpense","History","InputConcept","htmlFor","onChange","target","placeholder","InputAmount","InputDate","InputType","InputButton","Inputs","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f66c6939.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8080/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/operations\");\r\n};\r\n\r\nconst get = id => {\r\n  return http.get(`/operations/${id}`);\r\n};\r\n\r\nconst create = data => {\r\n  return http.post(\"/operations\", data);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  return http.put(`/operations/${id}`, data);\r\n};\r\n\r\nconst remove = id => {\r\n  return http.delete(`/operations/${id}`);\r\n};\r\n\r\nconst httpMethods = {\r\n  getAll,\r\n  get,\r\n  create,\r\n  update,\r\n  remove\r\n}\r\n\r\nexport default httpMethods","import { createContext, useState } from \"react\";\r\nimport OperationDataService from \"../services/OperationDataService\";\r\n\r\nexport const OperationContext = createContext();\r\n\r\nexport const OperationContextProvider = (props) => {\r\n  const [operations, setOperations] = useState([]);\r\n  const incomesArray = operations.filter((item) => item.type === \"income\");\r\n  const expensesArray = operations.filter((item) => item.type === \"expense\");\r\n  const [concept, setConcept] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n  const [date, setDate] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n\r\n  const RetrieveOperations = () => {\r\n    // GET Request\r\n    OperationDataService.getAll()\r\n      .then((response) => {\r\n        setOperations(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const HandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Check type of operation (Income/Expense)\r\n    switch (type) {\r\n      case \"income\":\r\n        const newIncome = {\r\n          concept: concept,\r\n          amount: amount,\r\n          date: date,\r\n          type: type,\r\n          id: `${date}_${concept}_${amount}_${type}`,\r\n        };\r\n        // POST Request\r\n        OperationDataService.create(newIncome)\r\n          .then((response) => {\r\n            console.log(response.data);\r\n          })\r\n          .catch((e) => {\r\n            console.log(e);\r\n          });\r\n        setOperations([...operations, newIncome]);\r\n        break;\r\n      case \"expense\":\r\n        const newExpense = {\r\n          concept: concept,\r\n          amount: amount,\r\n          date: date,\r\n          type: type,\r\n          id: `${date}_${concept}_${amount}_${type}`,\r\n        };\r\n        // POST Request\r\n        OperationDataService.create(newExpense)\r\n          .then((response) => {\r\n            console.log(response.data);\r\n          })\r\n          .catch((e) => {\r\n            console.log(e);\r\n          });\r\n        setOperations([...operations, newExpense]);\r\n        break;\r\n      // Handle default (Error)\r\n      default:\r\n        window.alert(\"Error\");\r\n    }\r\n    // Clear the inputs after being submitted\r\n    setConcept(\"\");\r\n    setAmount(\"\");\r\n    setDate(\"\");\r\n    setType(\"\");\r\n  };\r\n\r\n  const HandleDelete = (array, itemID) => {\r\n    // Create a filtered array without the items that match the itemID\r\n    const filteredArray = array.filter((item) => item.id !== itemID);\r\n    // DELETE Request\r\n    OperationDataService.remove(itemID)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setOperations(filteredArray);\r\n  };\r\n\r\n  const HandleUpdate = (array, item) => {\r\n    // Prompt input values\r\n    let newConcept = prompt(\r\n      \"Please enter your the new concept:\",\r\n      `${item.concept}`\r\n    );\r\n    let newAmount = prompt(\r\n      \"Please enter your the new amount:\",\r\n      `${item.amount}`\r\n    );\r\n    let newDate = prompt(\"Please enter your the new date:\", `${item.date}`);\r\n    // Create a new object with the prompt input values given\r\n    let updatedItem = {\r\n      concept: newConcept,\r\n      amount: newAmount,\r\n      date: newDate,\r\n      type: item.type,\r\n      id: item.id,\r\n    };\r\n    // PUT Request\r\n    OperationDataService.update(updatedItem.id, updatedItem)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    // Delete the current item from the array (so the updated item can take its place)\r\n    // Look for a cleaner solution (!)\r\n    let indexToRemove = array.indexOf(item);\r\n    const newArray = [\r\n      ...array.slice(0, indexToRemove),\r\n      ...array.slice(indexToRemove + 1),\r\n    ]; // (!)\r\n    setOperations([...newArray, updatedItem]);\r\n  };\r\n\r\n  return (\r\n    <OperationContext.Provider\r\n      value={{\r\n        operations,\r\n        setOperations,\r\n        incomesArray,\r\n        expensesArray,\r\n        concept,\r\n        setConcept,\r\n        amount,\r\n        setAmount,\r\n        date,\r\n        setDate,\r\n        type,\r\n        setType,\r\n        RetrieveOperations,\r\n        HandleSubmit,\r\n        HandleDelete,\r\n        HandleUpdate,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </OperationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default OperationContext;\r\n","const HeaderBalanceItem = ({title, value}) => {\r\n    return (\r\n    <div className=\"App-header__current-balance text-primary\">\r\n      <div className=\"App-header__current-balance--title\">{title}</div>\r\n      <div className=\"App-header__current-balance--value\">{value}</div>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  export default HeaderBalanceItem;","const HeaderIncomeItem = ({title, value}) => {\r\n    return (\r\n    <div className=\"App-header__total-income text-success\">\r\n      <div className=\"App-header__total-income--title\">{title}</div>\r\n      <div className=\"App-header__total-income--value\">+{value}</div>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  export default HeaderIncomeItem;","  \r\nconst HeaderExpenseItem = ({title, value}) => {\r\n    return (\r\n    <div className=\"App-header__total-expense text-danger\">\r\n      <div className=\"App-header__total-expense--title\">{title}</div>\r\n      <div className=\"App-header__total-expense--value\">-{value}</div>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  export default HeaderExpenseItem;","import { useContext, useEffect } from \"react\";\r\nimport OperationContext from \"../context/OperationContext\";\r\n\r\nimport HeaderBalanceItem from './HeaderBalanceItem';\r\nimport HeaderIncomeItem from './HeaderIncomeItem';\r\nimport HeaderExpenseItem from './HeaderExpenseItem';\r\n\r\nconst Header = () => {\r\n  const { incomesArray, expensesArray, RetrieveOperations } = useContext(OperationContext);\r\n\r\n  // Sum of all the income items amount\r\n  let totalIncome = incomesArray.reduce((sum, current) => sum + parseInt(current.amount), 0); // (!)\r\n  // Sum of all the expense items amount\r\n  let totalExpense = expensesArray.reduce((sum, current) => sum + parseInt(current.amount), 0); // (!)\r\n  // Result of the income minus the expense\r\n  let currentBalance = totalIncome - totalExpense;\r\n\r\n  // This will display and update all operations saved in the server\r\n  // Without this, deleted items in the client would still be stored into the server\r\n  useEffect(() => {\r\n    RetrieveOperations();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App-header\">\r\n      {/* Current Balance */}\r\n      <HeaderBalanceItem title=\"Balance:\" value={currentBalance}/>\r\n      {/* Total income */}\r\n      <HeaderIncomeItem title=\"Entry:\" value={totalIncome}/>\r\n      {/* Total expense */}\r\n      <HeaderExpenseItem title=\"Exit:\" value={totalExpense}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import { useContext } from \"react\";\r\nimport OperationContext from \"../context/OperationContext\";\r\n\r\nconst HistoryIncome = () => {\r\n  const { operations, incomesArray, HandleUpdate, HandleDelete } =\r\n    useContext(OperationContext);\r\n\r\n  return (\r\n    <div className=\"main-container-income\">\r\n      <h5 className=\"App-history__income--title text-success\">\r\n        INCOME HISTORY\r\n      </h5>\r\n\r\n      <div className=\"container-income-title\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">DATE</div>\r\n          <div className=\"col\">AMOUNT</div>\r\n          <div className=\"col\">CONCEPT</div>\r\n          <div className=\"col\">ACTION</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Display all income operations */}\r\n      {incomesArray.map((operation) => (\r\n        <div className=\"App-history__income-item\" key={operation.id}>\r\n          <div className=\"container-operations\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">{operation.date}</div>\r\n              <div className=\"col\">${operation.amount}</div>\r\n              <div className=\"col\">{operation.concept}</div>\r\n            </div>\r\n\r\n            <div className=\"d-grid\">\r\n              <button\r\n                className=\"btn-update btn-info btn-outline-light\"\r\n                onClick={() => HandleUpdate(operations, operation)}\r\n              >\r\n                Udapte\r\n              </button>\r\n              <button\r\n                className=\"btn-delete btn-danger btn-outline-light\"\r\n                onClick={() => HandleDelete(operations, operation.id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HistoryIncome;\r\n","import { useContext } from \"react\";\r\nimport OperationContext from \"../context/OperationContext\";\r\n\r\nconst HistoryExpense = () => {\r\n  const { operations, expensesArray, HandleUpdate, HandleDelete } =\r\n    useContext(OperationContext);\r\n\r\n  return (\r\n    <div className=\"main-container-expense\">\r\n      <h5 className=\"App-history__expense--title text-danger\">\r\n        EXPENSES HISTORY\r\n      </h5>\r\n\r\n      <div className=\"container-expense-title\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">DATE</div>\r\n          <div className=\"col\">AMOUNT</div>\r\n          <div className=\"col\">CONCEPT</div>\r\n          <div className=\"col\">ACTION</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Display all expense operations */}\r\n      {expensesArray.map((operation) => (\r\n        <div className=\"App-history__expense-item\" key={operation.id}>\r\n          <div className=\"container-operations\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">{operation.date}</div>\r\n              <div className=\"col\">${operation.amount}</div>\r\n              <div className=\"col\">{operation.concept}</div>\r\n            </div>\r\n\r\n            <div className=\"d-grid\">\r\n              <button\r\n                className=\"btn-update btn-info btn-outline-light\"\r\n                onClick={() => HandleUpdate(operations, operation)}\r\n              >\r\n                Udapte\r\n              </button>\r\n              <button\r\n                className=\"btn-delete btn-danger btn-outline-light\"\r\n                onClick={() => HandleDelete(operations, operation.id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HistoryExpense;\r\n","import HistoryIncome from \"./HistoryIncome\";\r\nimport HistoryExpense from \"./HistoryExpense\";\r\n\r\nconst History = () => {\r\n  return (\r\n    <div className=\"App-history\">\r\n      <HistoryIncome />\r\n      <HistoryExpense />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default History;","import { useContext } from \"react\";\r\nimport OperationContext from \"../context/OperationContext\";\r\n\r\nconst InputConcept = () => {\r\n  const { concept, setConcept } = useContext(OperationContext);\r\n  \r\n  return (\r\n  <div className=\"App-input__group\">\r\n    <label htmlFor=\"concept\">Concept</label>\r\n    <input className=\"form-control\" type=\"text\" value={concept} onChange={e => setConcept(e.target.value)} placeholder=\"Example: Donations\"></input>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default InputConcept;","import { useContext } from \"react\";\r\nimport OperationContext from \"../context/OperationContext\";\r\n\r\nconst InputAmount = () => {\r\n  const { amount, setAmount } = useContext(OperationContext);\r\n\r\n  return (\r\n    <div className=\"App-input__group\">\r\n      <label htmlFor=\"amount\">Amount</label>\r\n      <input\r\n        className=\"form-control\"\r\n        type=\"number\"\r\n        value={amount}\r\n        onChange={(e) => setAmount(e.target.value)}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputAmount;\r\n","import { useContext } from \"react\";\r\nimport OperationContext from \"../context/OperationContext\";\r\n\r\nconst InputDate = () => {\r\n  const { date, setDate } = useContext(OperationContext);\r\n\r\n  return (\r\n    <div className=\"App-input__group\">\r\n      <label htmlFor=\"date\">Date</label>\r\n      <input\r\n        className=\"form-control\"\r\n        type=\"date\"\r\n        value={date}\r\n        onChange={(e) => setDate(e.target.value)}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputDate;\r\n","import { useContext } from \"react\";\r\nimport OperationContext from \"../context/OperationContext\";\r\n\r\nconst InputType = () => {\r\n  const { type, setType } = useContext(OperationContext);\r\n\r\n  return (\r\n    <div className=\"App-input__group\">\r\n      <label className=\"form-label w-100\" htmlFor=\"operation\">\r\n        Type\r\n      </label>\r\n      <select\r\n        className=\"operation form-control w-100\"\r\n        id=\"operation\"\r\n        value={type}\r\n        onChange={(e) => setType(e.target.value)}\r\n      >\r\n        <option value=\"select\">Select</option>\r\n        <option value=\"income\">Entry</option>\r\n        <option value=\"expense\">Exit</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputType;\r\n","  \r\nimport { useContext } from \"react\";\r\nimport OperationContext from \"../context/OperationContext\";\r\n\r\nconst InputButton = () => {\r\n  const { HandleSubmit } = useContext(OperationContext);\r\n\r\n  return (\r\n  <div className=\"App-input__group\">\r\n    <button className=\"btn-add btn-success btn-outline-light w-100 mt-5 btn-sm\" onClick={ HandleSubmit }>Add</button>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default InputButton;","import InputConcept from \"./InputConcept\"\r\nimport InputAmount from \"./InputAmount\"\r\nimport InputDate from \"./InputDate\"\r\nimport InputType from \"./InputType\"\r\nimport InputButton from \"./InputButton\"\r\n\r\nconst Inputs = () => {\r\n  return (\r\n    <form className=\"App-input\">\r\n      {/* Concept */}\r\n      <InputConcept />\r\n      {/* Amount */}\r\n      <InputAmount />\r\n      {/* Date */}\r\n      <InputDate />\r\n      {/* Type (Income) */}\r\n      <InputType />\r\n      {/* Add button */}\r\n      <InputButton />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Inputs;","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport History from \"./components/History\";\nimport Inputs from \"./components/Inputs\";\n\nimport { OperationContextProvider } from \"./context/OperationContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <OperationContextProvider>\n        <Inputs />\n        <Header />\n\n        <History />\n      </OperationContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from './App';\nimport * as serviceWorker from \"./service-worker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}